extends layout

block content
  h1 Binpacker result
  hr
  b The packer
  br
  i Safety number: 
    span#safety= safety
  br
  - let boxNumber = 0
  each bin in packer.bins
    - const binVolume = Math.round(0.1+bin.getVolume() / (safety*safety*safety))
    - let totalItems = 0
    - let totalItemVolume = 0
    - let totalItemWeight = 0
    - boxNumber++
    table.table.table-dark.table-striped
      thead
        tr
          th= `Box (${boxNumber} of ${packer.bins.length})`
          th Size
          th Volume
      tbody
        tr
          td= bin.name
          td= `${Math.round(0.1+bin.width/safety)} x ${Math.round(0.1+bin.height/safety)} x ${Math.round(0.1+bin.depth/safety)} mm`
          td= `${binVolume} mm^3`
    p
      button.btn.btn-primary(type="button", data-toggle="collapse", data-target=`#collapse${boxNumber}`, aria-expanded="false", aria-controls=`collapse${boxNumber}`) Show/Hide box
    div.collapse(id=`collapse${boxNumber}`)
      div.renderoutput(id=`box_${boxNumber}`)
    div.hidden(class=`box_${boxNumber}`)= JSON.stringify(bin.items.map(i => {return {'pos': i.position, 'dim': i.getDimension()}}))
    div.hidden(class=`box_${boxNumber}_boxsize`)= JSON.stringify({ w: bin.width, h: bin.height, d: bin.depth })
    table.table.table-dark.table-striped
      thead
        tr
          th Item
          th Size
          th Weight
          th Rotation
          th Position
          th % of box volume
      tbody
        each item in bin.items
          - const itemVolume = item.getVolume()
          - totalItems++
          - totalItemVolume += itemVolume
          - totalItemWeight += item.weight
          tr
            td= item.name
            td= `${item.width} x ${item.height} x ${item.depth} mm`
            td= `${item.weight} g`
            td= `(${item.rotationType}) ${item.getDimension()}`
            td= `(${item.position[0]} x ${item.position[1]} x ${item.position[2]})`
            td= `${Math.round(10000 * itemVolume / binVolume) / 100} %`
    table.table.table-dark.table-striped
      thead
        tr
          th Total items
          th Used volume
          th Total weight
      tbody
        tr
          td= totalItems
          td= `${Math.round(10000 * totalItemVolume / binVolume) / 100} %`
          td= `${totalItemWeight} g`
  h3 Non-fit items
  table.table.table-dark.table-striped
    thead
      tr
        th Item
        th Size
        th Weight
    tbody
      each item in packer.unfitItems
        tr
          td= item.name
          td= `${item.width} x ${item.height} x ${item.depth} mm`
          td= `${item.weight} g`
  hr
  //- pre= JSON.stringify(packer, null, 2)
  a(href="/binpack")
    svg(width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-backspace" fill="currentColor" xmlns="http://www.w3.org/2000/svg")
      path(fill-rule="evenodd" d="M6.603 2h7.08a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1h-7.08a1 1 0 0 1-.76-.35L1 8l4.844-5.65A1 1 0 0 1 6.603 2zm7.08-1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1h7.08zM5.829 5.146a.5.5 0 0 0 0 .708L7.976 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z")
    |  Back
  script(src='/javascripts/previewer.js' type="module")
